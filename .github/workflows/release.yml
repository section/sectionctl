name: Build and release sectionctl binaries

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, for example v1.0, v10.15.10

jobs:
  release:
    name: üé¨ Create the release
    runs-on: ubuntu-latest
    outputs:
      release_upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true
          prerelease: false
  build:
    name: üöß Build binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        GOOS: [linux, darwin, windows]
        GOARCH: [amd64, arm64]
        exclude:
          - GOOS: windows
            GOARCH: arm64
    env:
      VERSION: ${{ github.ref }}
      GOARCH: ${{ matrix.GOARCH }}
      GOOS: ${{ matrix.GOOS }}
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.16
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Get Version
        id: get_version
        uses: battila7/get-version-action@v2
      - run: echo "MAJORVERSION=${{ steps.get_version.outputs.major }}" >> $GITHUB_ENV
      - run: echo "MINORVERSION=${{ steps.get_version.outputs.minor }}" >> $GITHUB_ENV
      - run: echo "PATCHVERSION=${{ steps.get_version.outputs.patch }}" >> $GITHUB_ENV
      - run: echo "VERSION=${{ steps.get_version.outputs.version }}" >> $GITHUB_ENV
      - name: Get dependencies
        run: |
          go get -v -t -d ./...
      - name: Build
        run: make build-release
      - uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist/
      - uses: actions/upload-artifact@v2
        with:
          name: sectionctl-${{ env.VERSION }}-${{ env.GOOS }}-${{ env.GOARCH }}.tar.gz
          path: dist/sectionctl-${{ env.VERSION }}-${{ env.GOOS }}-${{ env.GOARCH }}
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.release_upload_url }}
          asset_path: dist/sectionctl-${{ env.VERSION }}-${{ env.GOOS }}-${{ env.GOARCH }}.tar.gz
          asset_name: sectionctl-${{ env.VERSION }}-${{ env.GOOS }}-${{ env.GOARCH }}.tar.gz
          asset_content_type: application/gzip
  build_linux_packages:
    runs-on: 'ubuntu-latest'
    needs: [build, release]
    name: üêß Build Linux Packages (deb, rpm)
    strategy:
      matrix:
        GOOS: [linux]
        GOARCH: [amd64, arm64]
    env:
      VERSION: ${{ github.ref }}
      GOARCH: ${{ matrix.GOARCH }}
      GOOS: ${{ matrix.GOOS }}
      DESC: 'Section command line tool.'
      APP_NAME: 'sectionctl'
      MAINTAINER: 'alice@section.io'
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Download dist folder
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist/
      - name: Get Version
        id: get_version
        uses: battila7/get-version-action@v2
      - run: echo "MAJORVERSION=${{ steps.get_version.outputs.major }}" >> $GITHUB_ENV
      - run: echo "MINORVERSION=${{ steps.get_version.outputs.minor }}" >> $GITHUB_ENV
      - run: echo "PATCHVERSION=${{ steps.get_version.outputs.patch }}" >> $GITHUB_ENV
      - run: echo "VER={{env.MAJORVERSION}}.${{env.MINORVERSION}}.${{env.PATCHVERSION}}" >> $GITHUB_ENV
      - run: echo "NO_V_VERSION=${{ steps.get_version.outputs.version-without-v }}" >> $GITHUB_ENV
      - run: echo "VERSION=${{ steps.get_version.outputs.version }}" >> $GITHUB_ENV
      - run: echo "ARCHSTRING=x86_64" >> $GITHUB_ENV
        if: ${{ env.GOARCH == 'amd64' }}
      - run: echo "ARCHSTRING=aarch64" >> $GITHUB_ENV
        if: ${{ env.GOARCH != 'amd64' }}
      - name: Copy binaries to deb package directory
        run: |
          cp -p dist/sectionctl-${{ env.VERSION }}-${{ env.GOOS }}-${{ env.GOARCH }}/sectionctl .
          chmod +x sectionctl
      - uses: kentik/pkg@v1.0.0-rc7
        with:
          name: sectionctl
          version: '${{env.MAJORVERSION}}.${{env.MINORVERSION}}.${{env.PATCHVERSION}}'
          arch: ${{env.ARCHSTRING}}
          format: rpm
          package: packaging/linux/package.yaml
      - uses: kentik/pkg@v1.0.0-rc7
        with:
          name: sectionctl
          version: '${{env.MAJORVERSION}}.${{env.MINORVERSION}}.${{env.PATCHVERSION}}'
          arch: ${{env.ARCHSTRING}}
          format: deb
          package: packaging/linux/package.yaml
      - run: ls *.deb *.rpm
      - uses: actions/upload-artifact@v2
        with:
          name: sectionctl-${{ env.VERSION }}-${{ env.GOOS }}-${{ env.GOARCH }}.deb
          path: sectionctl_${{env.MAJORVERSION}}.${{env.MINORVERSION}}.${{env.PATCHVERSION}}-1_${{ env.GOARCH }}.deb
      - uses: actions/upload-artifact@v2
        with:
          name: sectionctl-${{ env.VERSION }}-${{ env.GOOS }}-${{ env.GOARCH }}.rpm
          path: sectionctl-${{env.MAJORVERSION}}.${{env.MINORVERSION}}.${{env.PATCHVERSION}}-1.${{ env.ARCHSTRING }}.rpm
      - name: Add RPM to Release
        id: add-rpm-to-release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.release_upload_url }}
          asset_name: sectionctl-${{ env.VERSION }}-${{ env.GOOS }}-${{ env.GOARCH }}.rpm
          asset_path: sectionctl-${{env.MAJORVERSION}}.${{env.MINORVERSION}}.${{env.PATCHVERSION}}-1.${{ env.ARCHSTRING }}.rpm
          asset_content_type: application/octet-stream
      - name: Add Deb to Release
        id: add-rpm-to-release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.release_upload_url }}
          asset_name: sectionctl-${{ env.VERSION }}-${{ env.GOOS }}-${{ env.GOARCH }}.deb
          asset_path: sectionctl_${{env.MAJORVERSION}}.${{env.MINORVERSION}}.${{env.PATCHVERSION}}-1_${{ env.GOARCH }}.deb
          asset_content_type: application/octet-stream
  create_installer:
    runs-on: 'windows-latest'
    needs: [build, release]
    name: ü™ü Create Windows Installer with NSIS
    strategy:
      matrix:
        GOOS: [windows]
        GOARCH: [amd64]
    env:
      VERSION: ${{ github.ref }}
      GOARCH: ${{ matrix.GOARCH }}
      GOOS: ${{ matrix.GOOS }}
      DESC: 'Section command line tool.'
      APP_NAME: 'sectionctl'
      MAINTAINER: 'alice@section.io'
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Download dist folder
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist/
      - name: Get Version
        id: get_version
        uses: battila7/get-version-action@v2
      - run: echo 'MAJORVERSION=${{ steps.get_version.outputs.major }}' >> $env:GITHUB_ENV
      - run: echo 'MINORVERSION=${{ steps.get_version.outputs.minor }}' >> $env:GITHUB_ENV
      - run: echo 'PATCHVERSION=${{ steps.get_version.outputs.patch }}' >> $env:GITHUB_ENV
      - run: echo 'VERSION=${{ steps.get_version.outputs.version }}' >> $env:GITHUB_ENV
      - run: echo $env:GITHUB_ENV
      - name: Download EnVar plugin for NSIS
        uses: carlosperate/download-file-action@v1.0.3
        with:
          file-url: https://nsis.sourceforge.io/mediawiki/images/7/7f/EnVar_plugin.zip
          file-name: envar_plugin.zip
          location: ${{ github.workspace }}
      - name: Extract EnVar plugin
        run: 7z x -o"${{ github.workspace }}/NSIS_Plugins" "${{ github.workspace }}/envar_plugin.zip"
      - name: Create nsis installer
        uses: joncloud/makensis-action@v3.3
        with:
          additional-plugin-paths: ${{ github.workspace }}/NSIS_Plugins/Plugins
          arguments: >
            -DARCH=amd64
            -DOUTPUTFILE=sectionctl-${{ env.VERSION }}-${{ env.GOOS }}-${{ env.GOARCH }}-installer.exe
            -DSECTIONCTL_VERSION=${{ env.VERSION }}
            -DMAJORVERSION=${{ env.MAJORVERSION }}
            -DMINORVERSION=${{ env.MINORVERSION }}
            -DBUILDVERSION=${{ env.PATCHVERSION }}
          script-file: 'packaging/windows/nsis.sectionctl.nsi'
      - name: Upload artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: sectionctl-${{ env.VERSION }}-${{ env.GOOS }}-${{ env.GOARCH }}-installer.exe
          path: packaging/windows/sectionctl-${{ env.VERSION }}-${{ env.GOOS }}-${{ env.GOARCH }}-installer.exe
      - name: Upload Installer Asset
        id: upload-installer-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.release_upload_url }}
          asset_path: packaging/windows/sectionctl-${{ env.VERSION }}-${{ env.GOOS }}-${{ env.GOARCH }}-installer.exe
          asset_name: sectionctl-${{ env.VERSION }}-${{ env.GOOS }}-${{ env.GOARCH }}-installer.exe
          asset_content_type: application/octet-stream
  delete_excess_artifacts:
    runs-on: 'ubuntu-latest'
    needs: [build, create_installer, build_linux_packages]
    name: ‚ùå Delete unnecessary 100mb dist artifact
    steps:
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: dist
