on: [push]

jobs:
  build:
    name: ðŸš§ Build binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        GOOS: [linux, darwin, windows]
        GOARCH: [amd64, arm64]
        exclude:
          - GOOS: linux
            GOARCH: arm64
          - GOOS: windows
            GOARCH: arm64
    env:
      VERSION: ${{ github.ref }}
      GOARCH: ${{ matrix.GOARCH }}
      GOOS: ${{ matrix.GOOS }}
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.16
        id: go
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Get Version
        id: get_version
        uses: battila7/get-version-action@v2
      - run: echo "MAJORVERSION=${{ steps.get_version.outputs.major }}" >> $GITHUB_ENV
      - run: echo "MINORVERSION=${{ steps.get_version.outputs.minor }}" >> $GITHUB_ENV
      - run: echo "PATCHVERSION=${{ steps.get_version.outputs.patch }}" >> $GITHUB_ENV
      - run: echo "VERSION=${{ steps.get_version.outputs.version }}" >> $GITHUB_ENV
      - name: Get dependencies
        run: |
          go get -v -t -d ./...
      - name: Build
        run: make build-release
      - uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist/
      - uses: actions/upload-artifact@v2
        with:
          name: sectionctl-${{ env.VERSION }}-${{ env.GOOS }}-${{ env.GOARCH }}.tar.gz
          path: dist/sectionctl-${{ env.VERSION }}-${{ env.GOOS }}-${{ env.GOARCH }}
  build_linux_packages:
    runs-on: 'ubuntu-latest'
    needs: build
    name: ðŸš§ Create Linux Packages
    strategy:
      matrix:
        GOOS: [linux]
        GOARCH: [amd64]
    env:
      VERSION: ${{ github.ref }}
      GOARCH: ${{ matrix.GOARCH }}
      GOOS: ${{ matrix.GOOS }}
      DESC: 'Section command line tool.'
      APP_NAME: 'sectionctl'
      MAINTAINER: 'alice@section.io'
    steps:
      - name: Download dist folder
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist/
      - run: ls
      - run: ls dist/
      - name: Get Version
        id: get_version
        uses: battila7/get-version-action@v2
      - run: echo "MAJORVERSION=${{ steps.get_version.outputs.major }}" >> $GITHUB_ENV
      - run: echo "MINORVERSION=${{ steps.get_version.outputs.minor }}" >> $GITHUB_ENV
      - run: echo "PATCHVERSION=${{ steps.get_version.outputs.patch }}" >> $GITHUB_ENV
      - run: echo "VERSION=${{ steps.get_version.outputs.version }}" >> $GITHUB_ENV
      - name: create sample script
        run: |
          mkdir -p packaging/deb/usr/bin
          mkdir -p .rpmpkg/usr/bin
          cp -p dist/sectionctl-${{ env.VERSION }}-${{ env.GOOS }}-${{ env.GOARCH }}/sectionctl packaging/deb/usr/bin/
          cp -p dist/sectionctl-${{ env.VERSION }}-${{ env.GOOS }}-${{ env.GOARCH }}/sectionctl .rpmpkg/usr/bin/
      - uses: jiro4989/build-deb-action@v2
        with:
          package: ${{ env.APP_NAME }}
          package_root: packaging/deb
          maintainer: ${{ env.MAINTAINER }}
          version: ${{ env.VERSION }}
          arch: '${{ env.GOARCH }}'
          desc: '${{ env.DESC }}'
      - uses: actions/upload-artifact@v2
        with:
          name: sectionctl-${{ env.VERSION }}-${{ env.GOOS }}-${{ env.GOARCH }}.deb
          path: sectionctl-${{ env.VERSION }}_${{ env.GOARCH }}.deb
      - uses: jiro4989/build-rpm-action@v2
        with:
          summary: '${{ env.DESC }}'
          package: ${{ env.APP_NAME }}
          package_root: .rpmpkg
          maintainer: ${{ env.MAINTAINER }}
          version: '${{ env.MAJORVERSION }}.${{ env.MINORVERSION }}.${{ env.PATCHVERSION }}'
          arch: 'x86_64'
          desc: '${{ env.DESC }}'
          license: 'MIT'
      - uses: actions/upload-artifact@v2
        with:
          name: sectionctl-${{ env.VERSION }}-${{ env.GOOS }}-el7-${{ env.GOARCH }}.rpm
          path: sectionctl-${{ env.MAJORVERSION }}.${{ env.MINORVERSION }}.${{ env.PATCHVERSION }}.el7.x86_64.rpm
  create_installer:
    runs-on: 'ubuntu-20.04'
    needs: build
    name: ðŸš§ Create Windows Installer Binary
    strategy:
      matrix:
        GOOS: [windows]
        GOARCH: [amd64]
    env:
      VERSION: ${{ github.ref }}
      GOARCH: ${{ matrix.GOARCH }}
      GOOS: ${{ matrix.GOOS }}
      DESC: 'Section command line tool.'
      APP_NAME: 'sectionctl'
      MAINTAINER: 'alice@section.io'
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Download dist folder
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist/
      - run: ls
      - run: ls dist/
      - name: Get Version
        id: get_version
        uses: battila7/get-version-action@v2
      - run: echo "MAJORVERSION=${{ steps.get_version.outputs.major }}" >> $GITHUB_ENV
      - run: echo "MINORVERSION=${{ steps.get_version.outputs.minor }}" >> $GITHUB_ENV
      - run: echo "PATCHVERSION=${{ steps.get_version.outputs.patch }}" >> $GITHUB_ENV
      - run: echo "VERSION=${{ steps.get_version.outputs.version }}" >> $GITHUB_ENV
      - name: 'Install makensis (apt)'
        run: sudo apt update && sudo apt install -y nsis nsis-pluginapi
      - name: Download EnVar plugin for NSIS
        uses: carlosperate/download-file-action@v1.0.3
        with:
          file-url: https://nsis.sourceforge.io/mediawiki/images/7/7f/EnVar_plugin.zip
          file-name: envar_plugin.zip
          location: ${{ github.workspace }}
        # if: ${{ matrix.GOOS == 'windows' }}
      - name: Extract EnVar plugin
        run: 7z x -o"${{ github.workspace }}/NSIS_Plugins" "${{ github.workspace }}/envar_plugin.zip"
        # if: ${{ matrix.GOOS == 'windows' }}
      - name: 'Set Plugin permissions'
        run: sudo chown -R $(whoami) /usr/share/nsis/Plugins/
        # if: ${{matrix.GOOS == 'windows' }}
      - run: ls packaging/windows/
      - name: Create nsis installer
        uses: joncloud/makensis-action@v3.3
        with:
          additional-plugin-paths: ${{ github.workspace }}/NSIS_Plugins/Plugins
          arguments: >
            -DARCH=amd64
            -DOUTPUTFILE=sectionctl-installer-${{ env.VERSION }}-amd64.exe
            -DSECTIONCTL_VERSION=${{ env.VERSION }}
            -DMAJORVERSION=${{ env.MAJORVERSION }}
            -DMINORVERSION=${{ env.MINORVERSION }}
            -DBUILDVERSION=${{ env.PATCHVERSION }}
          script-file: 'packaging/windows/nsis.sectionctl.nsi'
        # if: ${{matrix.GOOS == 'windows' }}
      - run: ls
      - run: ls dist/
      - run: ls packaging/windows/
      - name: Upload artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: sectionctl-installer-${{ env.VERSION }}-amd64.exe
          path: packaging/windows/sectionctl-installer-${{ env.VERSION }}-amd64.exe
        # if: ${{matrix.GOOS == 'windows' }}

      # - name: Upload Installer Asset
      #   id: upload-installer-asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ needs.release.outputs.release_upload_url }}
      #     asset_path: dist/sectionctl-${{ env.VERSION }}-amd64.exe
      #     asset_name: sectionctl-${{ env.VERSION }}-amd64.exe
      #     asset_content_type: application/octet-stream
      #   if: ${{matrix.GOOS == 'windows' }}
